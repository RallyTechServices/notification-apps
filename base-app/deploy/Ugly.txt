<!DOCTYPE html>
<html>
<head>
    <title>CATS-NotifyBaseApp-0.1</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Dec 04 2020 09:25:56 GMT-0700 (Mountain Standard Time) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Dec 04 2020 09:25:56 GMT-0700 (Mountain Standard Time)";
        var ARTIFACT = "";
        var BUILDER  = "kc683795";
        var CHECKSUM = 11068866988;
    </script>

    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("RallyCommunity.app.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.rallyappinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,showLog:!1,logger:null,items:[{xtype:"container",itemId:"information"},{xtype:"container",itemId:"button_box"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}this.showLog&&this.logger&&this.down("#button_box").add({xtype:"rallybutton",text:"Show Log",listeners:{scope:this,click:function(){this.logger.displayLog()}}}),a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,dock:"bottom"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created for the RallyCommunity."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);ARTIFACT&&(a=a+"<br/>Source artifact: "+ARTIFACT),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"top",html:a})}}}),Ext.define("RallyCommunity.app.Logger",{saveForLater:!1,saveLines:100,logArray:[],constructor:function(a){Ext.apply(this,a)},setSaveForLater:function(a){this.saveForLater=a},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),this.saveForLater&&(this.logArray||(this.logArray=[]),this.logArray.push(c.join(" ")),this.logArray.length>this.saveLines&&this.logArray.shift()),window.console&&console.log.apply(console,c)},getLogText:function(){return this.logArray&&0!==this.logArray.length?this.logArray.join("<br/>"):"-- no log --"},displayLog:function(){var a=this.getLogText();this.popup=Ext.create("Rally.ui.dialog.Dialog",{width:Ext.getBody().getWidth()-20,height:Ext.getBody().getHeight()-20,closable:!0,title:"Log",autoShow:!0,layout:"border",defaults:{layout:"fit",width:"50%",border:!1},items:[{region:"center",xtype:"container",html:a,autoScroll:!0}]})}}),Ext.define("RallyCommunity.app.Utilities",{singleton:!0,loadWsapiRecords:function(a){var b=Ext.create("Deft.Deferred"),c={model:"Defect",fetch:["ObjectID"]};return Ext.create("Rally.data.wsapi.Store",Ext.Object.merge(c,a)).load({callback:function(a,c,d){d?b.resolve(a):(console.error("Failed: ",c),b.reject("Problem loading: "+c.error.errors.join(". ")))}}),b.promise},loadAStoreWithAPromise:function(a,b){var c=Ext.create("Deft.Deferred");return Ext.create("Rally.data.wsapi.Store",{model:a,fetch:b}).load({callback:function(a,b,d){d?c.resolve(this):(console.error("Failed: ",b),c.reject("Problem loading: "+b.error.errors.join(". ")))}}),c.promise}}),Ext.define("RallyCommunity.app.notiferApp.Settings",{singleton:!0,validate:function(a){var b=[];return a.objectType||b.push("An object type must be selected in the app settings."),a.messageText||b.push("A message must be specified in app settings"),a.notificationUserField||a.defaultUserUUID||b.push("Please specify a User field or default User to notify."),a.notificationField||b.push("Please specify a field for notifications to be written to."),b},getSettingsFields:function(a,b,c){var d="5 0 5 0",e=a&&a.query,f=200,g=b||[{property:"Creatable",value:!0}];return[{name:"objectType",xtype:"rallycombobox",fieldLabel:"Object Type",labelWidth:f,labelAlign:"right",emptyText:"Choose Object Type...",valueField:"TypePath",displayField:"Name",storeConfig:{model:"TypeDefinition",sorters:[{property:"DisplayName"}],fetch:["DisplayName","TypePath"],filters:g,autoLoad:!1,remoteSort:!1,sortOnLoad:!0,remoteFilter:!0},valueField:"TypePath",displayField:"DisplayName",listeners:{change:function(a){a.fireEvent("typeselected",a.getValue(),a.context)},ready:function(a){a.fireEvent("typeselected",a.getValue(),a.context)}},bubbleEvents:["typeselected"],readyEvent:"ready"},{name:"notificationUserField",xtype:"rallyfieldcombobox",fieldLabel:"User to Notify",labelWidth:f,labelAlign:"right",readyEvent:"ready",handlesEvents:{typeselected:function(a,b){var c=Ext.Array.from(a)[0];c?this.refreshWithNewModelType(c,b):(this.store.removeAll(),this.reset())}},_isNotHidden:function(a){return a.attributeDefinition&&"User"===a.attributeDefinition.SchemaType?!0:!1}},{name:"defaultUserUUID",xtype:"rallyusercombobox",labelWidth:f,labelAlign:"right",fieldLabel:"Default User to Notify",valueField:"ObjectUUID",displayField:"UserName"},{name:"defaultToCreator",xtype:"rallycheckboxfield",fieldLabel:"Notify Creator if User Field is empty",labelWidth:f,enabled:c},{name:"notificationField",xtype:"rallyfieldcombobox",fieldLabel:"Notification Field",labelWidth:f,labelAlign:"right",readyEvent:"ready",handlesEvents:{typeselected:function(a,b){var c=Ext.Array.from(a)[0];c?this.refreshWithNewModelType(c,b):(this.store.removeAll(),this.reset())}},_isNotHidden:function(a){if(a.attributeDefinition){if("TEXT"===a.attributeDefinition.AttributeType&&a.readOnly===!1)return!0;if("Discussion"===a.attributeDefinition.Name)return!0}return!1}},{name:"messageText",xtype:"textarea",labelWidth:f,labelAlign:"right",labelSeparator:"",flex:1,anchor:"100%",fieldLabel:"Nofication Message"},{name:"query",xtype:"textarea",width:"100%",labelWidth:f,labelAlign:"right",labelSeparator:"",fieldLabel:"Query",margin:"2 0 2 0",flex:1,anchor:"100%",plugins:["rallyfieldvalidationui"],emptyText:"Type a Rally Query like ( ObjectID > 0 )...",value:e,validateOnBlur:!0,validateOnChange:!1,validator:function(a){if(!a)return"Query is required.";try{return a&&Rally.data.wsapi.Filter.fromQueryString(a),!0}catch(b){return b.message}},listeners:{validitychange:function(){this.fireEvent("rowvalidate",this)}}},{name:"saveLog",xtype:"rallycheckboxfield",boxLabelAlign:"after",fieldLabel:"",margin:d,boxLabel:'Save Logging<br/><span style="color:#999999;"><i>Save last 100 lines of log for debugging.</i></span>'}]}}),Ext.define("UserNotification.Base",{mixins:{observable:"Ext.util.Observable"},config:{record:null,notificationColor:"red",messageText:null,defaultNotificationUserUUID:null,notificationUserField:null,notificationField:null,defaultToCreator:!1,createdByField:"CreatedBy",identifierField:null},constructor:function(a){this.mixins.observable.constructor.call(this,a),Ext.apply(this,a)},send:function(){this.record||this.fireEvent("notifyerror","No record provided."),this.fireEvent("notifyerror","Base class implemented, no message sent.")},_buildNotificationText:function(){var a=this._getUserNotificationFieldUUID(this.record);if(!a)return this.fireEvent("notifyerror","No user found to mention for "+this.record.get("FormattedID")),null;if(!this.messageText)return this.fireEvent("notifyerror","No message text specified for "+this.record.get("FormattedID")),null;var b='<p><span class="mention" contenteditable="false" data-mention="{0}" style="color:{2}">{1}</span></p>';return Ext.String.format(b,a,this.messageText,this.notificationColor)},_getUserNotificationFieldUUID:function(){var a=this.notificationUserField,b=this.defaultToCreator;if(!a&&!b&&!this.defaultNotificationUserUUID)return null;var c=this.record&&this.record.get(a)&&this.record.get(a)._refObjectUUID||null;return!c&&b&&(c=this.record&&this.record.get(this.createdByField)._refObjectUUID||null),c||this.defaultNotificationUserUUID}}),Ext.define("UserNotification.TextField",{extend:"UserNotification.Base",send:function(){if(!this.record)return void this.fireEvent("notifyerror","No record provided.");console.log("here");var a=this.record.get(this.notificationField)||"",b=this._buildNotificationText();if(console.log(b),null!==b){var b=Ext.String.format("{0} <br/>{1} {2}",a,Rally.util.DateTime.formatWithDefaultDateTime(new Date),b);console.log(b);var c=this.record.get("Name");this.record.set(this.notificationField,b),this.record.save({callback:function(a,b){b.wasSuccessful()?this.fireEvent("notifysuccess",c):this.fireEvent("notifyerror",c)},scope:this})}}}),Ext.define("UserNotification.Discussion",{extend:"UserNotification.Base",send:function(){if(console.log("send discussion"),!this.record)return void this.fireEvent("notifyerror","No record provided.");var a=this.record.getCollection("Discussion"),b=this._buildNotificationText();if(null!==b){var c=this.record.get("FormattedID");a.load({callback:function(){a.add({Text:b}),a.sync({success:function(){this.fireEvent("notifysuccess",c)},failure:function(){this.fireEvent("notifyerror","Failed to save mention for "+c)},scope:this})},scope:this})}}}),Ext.define("RallyCommunity.app.ViolationContainer",{extend:"Ext.container.Container",alias:"widget.violationcontainer",config:{record:null,notificationColor:"red",messageText:null,defaultNotificationUserUUID:null,notificationUserField:null,notificationField:null,defaultToCreator:!1,createdByField:"CreatedBy",identifierField:null},constructor:function(a){this.callParent([a]),this.build()},build:function(){this.update("No violations have been loaded becuase there is no logic.  Please extend the Violation container class to include a build method for the display and a getRecords method for the notification.")},getRecords:function(){return[]}}),Ext.define("RallyCommunity.app.NotifierApp",{extend:"Rally.app.App",componentCls:"app",logger:new RallyCommunity.app.Logger,defaults:{margin:10},items:[{xtype:"container",flex:1,itemId:"grid_box1",region:"west"},{xtype:"container",flex:1,itemId:"grid_box2",region:"east"}],integrationHeaders:{name:"RallyCommunity.app.NotifierApp"},config:{defaultSettings:{defaultToCreator:!1,defaultUserUUID:null,messageText:"This is a message",notificationColor:"red",notificationField:null,notificationUserField:"Owner",objectType:null,query:"(ObjectID > 0)",referenceProject:null,useDataContext:!0}},launch:function(){var a=RallyCommunity.app.notiferApp.Settings.validate(this.getSettings());return a&&a.length>0?void this.add({xtype:"container",itemId:"notification_box",html:a.join("<br/>")}):(this.add({xtype:"container",itemId:"notification_box",layout:"vbox"}),this.down("#notification_box").add({xtype:"rallybutton",text:"Send Notifications",iconCls:"icon-bell",cls:"send-notifications",handler:this._sendNotifications,scope:this}),this.down("#notification_box").add({xtype:"container",itemId:"notification_text",cls:"notification-label",html:Ext.String.format('<p><span style="color:{1};">{0}</span></p>',this.getSetting("messageText"),this.getSetting("notificationColor")),readOnly:!0,width:"75%"}),void this.add({xtype:"violationcontainer",itemId:"violations",fields:["a","b"],context:this.getContext(),objectType:this.getObjectType()}))},getDefaultFetchFieldsForNotifierType:function(){return[]},_sendNotifications:function(){var a=this.down("#violations").getRecords();this.success=0,this.failure=0;for(var b=this.getNotificationType(),c=this.getSetting("messageText"),d=this.getSetting("defaultUserUUID"),e=this.getSetting("notificationUserField"),f=this.getSetting("defaultToCreator"),g=this.getSetting("notificationColor"),h=this.getSetting("notificationField"),i=0;i<a.length;i++)try{var j=a[i],k=Ext.create(b,{record:j,messageText:c,defaultNotificationUserUUID:d,notificationUserField:e,defaultToCreator:f,notificationColor:g,notificationField:h,listeners:{notifyerror:this._notifyError,notifysuccess:this._notifySuccess,scope:this}});k.send()}catch(l){console.log("Error "+l)}},_notifyError:function(a){console.log("_notifyError",a)},_notifySuccess:function(a){console.log("_notifySuccess",a)},_showErrorMessage:function(a){console.log("error",a)},getScopeContext:function(){return"true"==this.getSetting("useDataContext")||1==this.getSetting("useDataContext")?this.getDataContext():{project:null}},getNotificationFields:function(){var a=this.getDefaultFetchFieldsForNotifierType();return("true"==this.getSetting("defaultToCreator")||1==this.getSetting("defaultToCreator"))&&a.push("CreatedBy"),this.getSetting("notificationUserField")&&a.push(this.getSetting("notificationUserField")),a.push(this.getSetting("notificationField")),a},getNotificationType:function(){return"Discussion"===this.getSetting("notificationField")?"UserNotification.Discussion":"UserNotification.TextField"},getUserNotificationFieldUUID:function(a){var b=this.getSetting("notificationUserField"),c="true"==this.getSetting("defaultToCreator")||1==this.getSetting("defaultToCreator"),d=a&&a.get(b)&&a.get(b)._refObjectUUID||null;return!d&&c&&(d=a&&a.get("CreatedBy")._refObjectUUID||null),d||this.getDefaultNotificationUser()},getDefaultNotificationUser:function(){return this.getSetting("defaultUserUUID")||null},getObjectType:function(){return this.getSetting("objectType")},getSettingsFields:function(){var a=null,b=!1;return RallyCommunity.app.notiferApp.Settings.getSettingsFields(this.getSettings(),a,b)},getOptions:function(){var a=[{text:"About...",handler:this._launchInfo,scope:this}];return a},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("RallyCommunity.app.InfoLink",{showLog:this.getSetting("saveLog"),logger:this.logger})},isExternal:function(){return"undefined"==typeof this.getAppId()}});

               Rally.launchApp('RallyCommunity.app.NotifierApp', {
                   name: 'NotifyBaseApp'
               });
        });
    </script>

    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.send-notifications {
    background-color: #EE1C25;
}

.notification-label {
    font-family:NotoSans;
    white-space:nowrap;
    font-size:13px;
}
    </style>

</head>
<body></body>
</html>